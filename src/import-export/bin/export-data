#!/bin/sh
# sudo src/import-export/bin/export-data
if [ "$(id -u)" -ne 0 ]; then
	echo "This utility needs to run as root"
	exit 1
fi
SNAP="src/common"
SNAP_DATA=/var/snap/nextcloud/current/
MYSQL_ROOT_OPTION_FILE="$SNAP_DATA/mysql/root.ini"
CUSTOM_NEXTCLOUD_DATADIR="/var/snap/nextcloud/common/nextcloud/data"

# shellcheck source=src/nextcloud/utilities/nextcloud-utilities
. "src/nextcloud/utilities/nextcloud-utilities"
# shellcheck source=src/mysql/utilities/mysql-utilities
# . "$SNAP/utilities/mysql-utilities"
# shellcheck source=src/common/utilities/common-utilities
. $SNAP/utilities

# Done custom imports

# export MYSQL_ROOT_OPTION_FILE="$SNAP_DATA/mysql/root.ini"
# export MYSQL_PIDFILE="/tmp/pids/mysql.pid"
# export MYSQL_SOCKET="/tmp/sockets/mysql.sock"
# export NEXTCLOUD_PASSWORD_FILE="$SNAP_DATA/mysql/nextcloud_password"
# MYSQL_SETUP_LOCKFILE="/tmp/locks/mysql-setup"

# mysql_nextcloud_password='mysql_password'

# shellcheck disable=SC2119
wait_for_mysql

COMMAND="nextcloud.export"
# BACKUP_DIRECTORY="${SNAP_COMMON}/backups"
BACKUP_DIRECTORY="/home/name/git/backup0"
FORMAT="1"

print_usage()
{
	echo "Usage:"
	echo "    $COMMAND [OPTIONS]"
	echo "    Export data suitable for migrating servers. By default this"
	echo "    includes the Nextcloud database, configuration, and data"
	echo "    (equivalent to running $COMMAND -abcd)."
	echo ""
	echo "Available options:"
	echo "    -h: Display this help message"
	echo "    -a: Include the (non-default) apps"
	echo "    -b: Include the database"
	echo "    -c: Include the config"
	echo "    -d: Include the data (can be quite large)"
}

export_apps()
{
	backup="$1"
	echo "Exporting apps..."
	if ! rsync -ah --info=progress2 "$SNAP_DATA/nextcloud/extra-apps/" "${backup}/apps"; then
		echo "Unable to export apps"
		exit 1
	fi
}

export_database()
{
	backup="$1"
	echo "Exporting database..."
	# if ! mysqldump --defaults-file="$MYSQL_ROOT_OPTION_FILE" \
	if ! mysqldump --single-transaction -h 127.0.0.1 -u root -pmysql_password nextcloud > "${backup}/database.sql"; then
		echo "Unable to export database"
		exit 1
	fi
}

export_config()
{
	backup="$1"
	config_backup="${backup}/config.php"

	# Mask out the config password. We don't need it when restoring.
	echo "Exporting config..."
	if ! sed "s/\(dbpassword.*=>\s*\).*,/\1'DBPASSWORD',/" \
	       "${SNAP_DATA}/nextcloud/config/config.php" > "$config_backup"; then
		echo "Unable to export config"
		exit 1
	fi
}

export_data()
{
	backup="$1"
	echo "Exporting data..."
	# if ! rsync -ah --info=progress2 "${NEXTCLOUD_DATA_DIR%/}/" "${backup}/data"; then
	if ! rsync -ah --info=progress2 "$CUSTOM_NEXTCLOUD_DATADIR/" "${backup}/data"; then
		echo "Unable to export data"
		exit 1
	fi
}

do_export_apps=false
do_export_database=false
do_export_config=false
do_export_data=false

# If no parameters are specified, default to exporting everything
if [ $# -eq 0 ]; then
	do_export_apps=true
	do_export_database=true
	do_export_config=true
	do_export_data=true
fi

while getopts ":abcdh" opt; do
	case $opt in
		a)
			do_export_apps=true
			;;
		b)
			do_export_database=true
			;;
		c)
			do_export_config=true
			;;
		d)
			do_export_data=true
			;;
		h)
			print_usage
			exit 0
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done

# Clear options
shift "$((OPTIND-1))"

echo "WARNING: This functionality is still experimental and under" >&2
echo "development, use at your own risk. Note that the CLI interface is" >&2
echo "unstable, so beware if using from within scripts." >&2
echo "" >&2

backup="${BACKUP_DIRECTORY}/$(date +%Y%m%d-%H%M%S)"

mkdir -p "$backup"
chmod 750 "$backup"

echo "$FORMAT" > "${backup}/format"

# Enable maintenance mode so data can't change out from under us
if ! enable_maintenance_mode; then
	echo "Unable to enter maintenance mode"
	exit 1
fi
trap 'disable_maintenance_mode' EXIT

if [ "$do_export_apps" = true ]; then
	read -p "Exporting apps"
	export_apps "$backup"
fi

if [ "$do_export_database" = true ]; then
	export_database "$backup"
fi

if [ "$do_export_config" = true ]; then
	export_config "$backup"
fi

if [ "$do_export_data" = true ]; then
	export_data "$backup"
fi

echo ""
echo "Successfully exported $backup"
